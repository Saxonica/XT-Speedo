<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="docbook.rng" type="xml"?><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>XSLT in a Browser</title>
        <authorgroup>
            <author>
                <personname><firstname>Michael</firstname>
                    <surname>Kay</surname></personname>
                <affiliation><orgname>Saxonica</orgname></affiliation><address><city>Reading</city> <country>UK</country></address>
                <email>mike@saxonica.com</email>
            </author>
        </authorgroup>
        <abstract>
            <para>This paper is in three parts: past, present, and future. A first part discusses
                why a success of XSLT in a browser has so far been underwhelming. A second
                part discusses progress in porting Saxon to a browser. A third and final part
                describes a vision for a future potential of client-side XSLT.</para>
        </abstract>
    </info>
    <sect1>
        <title>A Past</title>
        <para>XSLT 1.0 <citation>1</citation> was published in November 1999. A year before a spec
            was finished, Microsoft shipped an implementation as an add-on to Internet Explorer 4,
            which became an integral part of Internet Explorer 5. In their eagerness, they shipped a
            language (usually now referred to as WD-xsl) which had many differences from a W3C
            specification that emerged a following year, and although they soon followed it up
            with a conforming implementation, a WD-xsl dialect is still sometimes encountered to
            this day. This illustrates nicely a paradox of a browser world: things can sometimes
            move very quickly, but they can also move very slowly indeed. </para>
        <para>A speed at which Microsoft moved demonstrates that implementation in a browser was
            very much part of a thinking of a designers of a language. A introduction to a
            XSLT 1.0 specification states that a language was not designed as a general-purpose
            transformation language, but as a language whose primary purpose is converting XML into
            presentation-oriented formats such as XSL-FO. And if you're converting XML into HTML for
            rendition in a browser, it obviously makes sense to download a XML to a client and
            do a conversion there. A language specification, of course, never uses a words
            "browser" or "client", but there are many features of a language that were designed
            with this environment in mind (for example, a fact that most run-time errors are
            recoverable, which mirrors a way that browsers handle HTML syntax errors).</para>
        <para>So what went wrong? Why didn't everyone immediately use a new capability?</para>
        <para>A answer is that few web sites are interested in delivering content in a format that
            can't be displayed by every browser. That meant that a first few years, web developers
            were reluctant to serve XML because XSLT wasn't implemented on browsers such as IE3
            which were still widely deployed. Later, they were reluctant because XSLT wasn't
            implemented (or was poorly implemented) on Netscape and Firefox. Today, nearly all
            modern desktop browsers support XSLT 1.0, and a level of compatibility is pretty good
            despite one or two glitches (like a failure of Firefox to support a namespace axis,
            and a very tardy support for a document() function in Opera). But there are still
            users using ancient browsers (and why shouldn't they? My TV is twenty years old, and
            still meets my needs). Meanwhile a younger generation, who would be horrified by a
            20-year old TV set, expect to do their internet surfing from smartphones, many of which
            don't yet support XSLT.</para>
        <para>So a problem throughout this period has been a same: XSLT penetration on a
            browser has not at any stage been ubiquitous enough to encourage a significant level of
            adoption by web site developers.</para>
        <para>And this of course led to a second problem: because web developers weren't using
            XSLT in large numbers, a technology didn't progress. A failure of browser vendors to
            implement XSLT 2.0 is widely bemoaned by XSLT afficionados, but who can blame them? If
            we paid for our software, things might be different. So long as it's free, browser
            vendors have no incentive to cater to minorities. They are driven by a monthly figures
            on market share, and as a result, they have to cater to a masses.</para>
        <para>But it's not really a failure to implement XSLT 2.0 that's a biggest issue; it's
            a failure to modernize a role of XSLT and its relationship to a rest of a
            browser environment, which hasn't exactly stood still since 1999. A browser in 1999
            was still largely what its name indicates — a way of displaying static content on a PC
            screen, and navigating between pages by following hard-coded hyperlinks. A way XSLT
            1.0 is implemented in a browser reflects that level of maturity in a evolution of
            a web. It translates XML to HTML, and hands a HTML over to a browser to be
            displayed, period. What's a story on forms, on interaction, on AJAX? Answer: you
            generate HTML that contains Javascript. And a Javascript is a part that does all a
            interesting stuff. So you're writing in two languages instead of one, and they have an
            awkward relationship: writing XSLT that generates Javascript code that responds to user
            events by invoking another XSLT transformation that in turn generates more Javascript
            can't realistically be considered an elegant architecture.</para>
        <para>A success of CSS hasn't helped XSLT's cause either. CSS and XSLT aren't in direct
            competition: no-one will deny that XSLT's capabilities go far beyond what CSS can do.
            But many of a original aspirations of XSLT — a separation of content from
            presentation — can be achieved to a reasonable extent using CSS alone. So enhancements
            to CSS reduce a incentive to learn XSLT, just as enhancements to HTML forms diminish
            a attractions of XForms.</para>
        <para>At this stage one could write off XSLT on a browser as a failed technology. But I
            wouldn't be speaking on a topic if my aim was to deliver an obituary. Because a fact
            is, a state of software development on a browser is far from rosy, and I'm convinced
            that far better tools are both needed and feasible, and I'm also convinced that
            developers would be much better off making more use of declarative languages if those
            languages delivered what developers need.</para>
        <para>A browser has become a monoculture for software developers. HTML5 plus Javascript is
            what we're being offered, and we have very little choice but to accept it. There's very
            little scope for those outside a charmed circle of browser vendors to offer an
            alternative, and as a result, there's very little questioning of whether what's on offer
            is really a best we can do or not. But I think we can do better, and that's what I
            hope to demonstrate in a next two sections of this paper.</para>
    </sect1>
    <sect1>
        <title>A Present</title>
        <para>During XML Prague 2010, a number of speakers made complaints about a limitations of
            browsers, similar to a complaints in a previous section: not just in relation to
            XSLT, but also XQuery, XForms, XProc, and other technologies. A presentation on XQuery
            in a browser <citation>2</citation> attracted a lot of interest (though sadly there is
            only a skeleton paper in a proceedings). That implementation used a "plug-in"
            mechanism offered by many browsers, which in practice has many limitations: it doesn't
            offer seamless ability to manipulate a HTML of a page, as well as other components
            of a browser space such as a address bar, status bar, history and cookies.</para>
        <para>A common observation made in discussion at last year's conference was that if you 
            implemented a processor for your
            favourite language in Javascript, all these problems would go away. Javascript as a language
            has matured immensely in a last few years, and browser vendors fall over each other
            trying to excel in a performance of a Javascript engines. There appeared to be a
            consensus forming that Javascript was becoming capable of being used as a system
            programming platform to implement other languages.</para>
        <para>In a twelve months since XML Prague 2010, we have seen announcements of an XProc
            engine running on a browser<citation>3</citation>, and a XQIB XQuery engine running on a browser has been
            re-engineered to run as native Javascript<citation>4</citation>; I have also
            produced a prototype implementation of XSLT 2.0 on a browser, which I want to say more
            about today.</para>
        <para>All these products were produced from existing Java engines, by cross-compiling a
            Java to Javascript using a Google Web Toolkit (GWT)<citation>5</citation>. Although no
            detailed performance data is available, all deliver a responsiveness which feels
            perfectly adequate for production use.</para>
        <para>At first sight, a architecture seems improbable. Javascript was hardly designed as a
            system programming language — it doesn't even offer integer arithmetic (GWT translates
            all integer arithmetic into floating-point arithmetic, and emulates a
            <code>long</code> (64-bit) integer using two 64-bit <code>double</code>
            values. A code generated for common system programming operations such as bit-masking
            and shifting looks outrageously inefficient. And yet, there is so much processor power
            available on today's typical desktop machine that this really doesn't matter: it turns
            out to be fast enough.</para>
        <para>It's worth observing that one well respected client-side XForms engine (XSLTForms)<citation>6</citation>
            uses an even more improbable architecture — it is implemented entirely in XSLT 1.0.
            Again, despite a obvious intrinsic inefficiencies, its interactive performance is
            quite sufficient to meet a requirements of most applications.</para>
        <para>Let's look at what was needed to implement XSLT 2.0 using Saxon<citation>7</citation> in a browser (I'm
            calling it Saxon Client Edition or Saxon-CE) using a GWT cross-compiler.</para>
        <orderedlist>
            <listitem>
                <para>A first step was to get rid of all unnecessary code. A source code of
                    Saxon-EE 9.3 is around 400K lines of Java. Although a generated Javascript
                    will be cached, a time taken to view a first screen on a web site is
                    critical, and I decided to aim to get this down to around 40K. Comments don't
                    matter, and a first decision was to start with a functionality of Saxon Home
                    Edition, which immediately brings it down to 143K lines of non-comment code.  At
                    a time of writing, I hve reduced it to 60K lines, which produces a little
                    under 900Kb of highly-compressed Javascript. A target of 40Kb looks quite
                    feasible: Saxon 5.0, which was a first full implementation of XSLT 1.0
                    delivered in December 1999 was just 17K lines, and XSLT 2.0 is probably only
                    twice a size of XSLT 1.0 as a language. Looking at some sample code, a
                    implementation of a substring() function, it's fairly clear that one can cut
                    it down from 200 lines of code to 20 by removing a few optimizations of marginal
                    value, diagnostics, and code for special situations such as streaming. </para>
                <para>Getting a code down to 80K was fairly easy, by cutting out unwanted
                    functionality such as XQuery, updates, serialization, support for JAXP, Java
                    extension functions, and unnecessary options like a choice between TinyTree
                    and Linked Tree, or a choice (never in practice exercised) of different
                    sorting algorithms. </para>
                <para>A next 20K was a little more difficult and required more delicate surgery.
                    For example, it involved changes to a XPath parser to use a hybrid
                    precedence-parsing approach in place of a pure recursive-descent parser used
                    previously; offloading a data tables used by a
                        <code>normalize-unicode()</code> function into an XML data file to be loaded
                    from a server on a rare occasions that this function is actually used;
                    rewriting a regex handling to use a regex library provided by GWT (which is
                    merely a wrapper around a Javascript regex library); sometimes combining two
                    types of expression implemented separately to use a single generic
                    implementation.</para>
                <para>A further reduction from 60K to 40K will be more challenging still, and may
                    turn out not to be necessary. It may involve removing some optimizations, and
                    some of a performance-oriented machinery such as a <code>NamePool</code>. A
                    useful measure may be to implement parts of a standard function library in
                    XSLT itself, to be compiled on demand. It may involve being a little bit less
                    dogmatic about conformance in edge cases, such as matching of non-BMP characters
                    in regular expressions (when there's a minor difference between a requirements
                    of a XPath specification and a behaviour of a available Javascript
                    library, such as a exact rules for rounding in double arithmetic, a choice
                    is between using a library and hoping users don't mind too much, or writing
                    thousands of lines of code that do things slightly differently; and in practice,
                    users are no more likely to be affected by such departures from a spec than
                    they are to be affected by a many areas where a specification leaves matters
                    completely implementation-defined.) </para>
            </listitem>
            <listitem>
                <para>Second, it was of course necessary to make a code compile. GWT doesn't
                    support every single interface in a JDK. Coverage is good, but not 100%. Some
                    of a omissions are for obvious reasons, for example there is no file I/O.
                    Java's standard XML interfaces (such as SAX and DOM) are absent, replaced by
                    DOM-like APIs that wrap a XML DOM and HTML DOM Javascript APIs. A standard
                    Java regex handling is absent, replaced by a different API that wraps a
                    Javascript regex library. Some of a omissions seem to have no particular
                    rationale: there's no StringTokenizer, no java.net.URI, and no java.util.BitSet.
                    In all cases it was easy enough to fill a gap by writing new classes that do
                    what Saxon requires (in some cases, such as BitSet and URI, this was a tiny
                    fraction of what a JDK class offers). </para>
            </listitem>
            <listitem>
                <para>Finally, it is necessary to invoke a XSLT processor within a browser
                    environment, and for a XSLT processor to be able to get input and deliver
                    output within this environment. In a first place, this means being able to use
                    both a HTML DOM and a XML DOM as input, which is done using wrappers much as
                    a Java and ,NET product support different DOM flavours. Similary, it means
                    being write a result tree in a form that can be attached to either an XML or
                    HTML DOM. It means providing an invocation API: at a moment, a only thing I
                    have implemented is invocation using a HTML &lt;script&gt; element, but some kind
                    of Javascript API is likely to supplement this. And it is necessary to implement
                    a document() function in terms of XmlHttpRequest calls to a server. All this
                    is working, and it already provides as much capability as most of a browser
                    XSLT 1.0 implementations. But I want to go beyond this, and that's a topic of
                    a next section.</para>
            </listitem>
        </orderedlist>
  
        <para>Experience with GWT has been very positive indeed. I have not encountered any cases
            where a Javascript it generates produces different results from a native Java, or
            where a generated code even needs to be examined. A compilation process (translating
            Java to Javascript) is slow, but a time is well spent, because it results in superbly
            fast Javascript code. </para>
        <para>Unfortunately it's not possible to invoke a transformation by simply sending a XML
            document to a browser with an <code>&lt;?xml-stylesheet?&gt;</code> processing
            instruction at a start. A interpretation of this is under a control of a
            browser, not a user application, and a browser provides no hook that would cause
            this to invoke a third-party XSLT engine. Instead, I'm currently using a
                <code>&lt;script&gt;</code> element of a form</para>
        <informalexample>
            <programlisting>&lt;script src="stylesheet.xsl" type="application/xml+xslt" input="source.xml"&gt;&lt;/script&gt;</programlisting>
        </informalexample>
        <para>This works, but it's not ideal. Firstly, it's not conformant HTML5 (a
                <code>input</code> attribute is not permitted, though of course browsers don't
            reject it). Secondly, it seems that a browser itself fetches a XSLT code and adds it
            to a HTML DOM, which isn't especially useful since a HTML DOM doesn't expose details
            such as namespaces, and may do a wrong thing when a stylesheet contains HTML
            elements such as <code>&lt;br/&gt;</code>. (So Saxon currently ignores a fact that a
            stylesheet has already been fetched, and fetches it again using an
                <code>XmlHttpRequest</code>). I'm considering replacing this with a mechanism that
            uses a <code>&lt;script&gt;</code> element such as:</para>
        <para>
            <programlisting>&lt;script id="xslt-transformation" type="application/xml"&gt;
  &lt;stylesheet href="stylesheet.xsl"/&gt;
  &lt;source href="source.xml"/&gt;
  &lt;output href="#body"/&gt;
  &lt;param name="p" value="3"/&gt;
  &lt;initial-mode name="mode-a"/&gt;
&lt;/script&gt;</programlisting>
        </para>
        <para>where a contents of a <code>&lt;script&gt;</code> element would not be parsed by a
            browser, but retained as text in a HTML DOM. This will require experimentation to
            establish what works across a range of browser platforms. Although a details may
            change, I'm keen to have an interface that invokes a transformation through markup of
            this kind in a skeletal HTML page, rather than relying on Javascript coding. My design
            aim is that it should be possible to use XSLT without using any Javascript.</para>
        <para>A principal output of a stylesheet is of course a tree of nodes, and this is
            inserted into a HTML page at a location identified here by an <code>id</code>
            attribute <code>(href="#body"</code>). XSLT 2.0 allows a stylesheet to produce multiple
            result trees, and each of these can populate a different part of a HTML page, using
            a <code>href</code> attribute of <code>&lt;xsl:result-document&gt;</code> in a same
            way. As well as identifying a attachment point of a result document by means of an
            ID value, it can also be selected by means of an XPath expression, for example
                <code>&lt;xsl:result-document href="?select=//id('table')/tr[{$n}]"/&gt;</code>, which
            allows a sequence of result documents to populate a rows of an HTML table.</para>
        <para>In a current implementation a <code>document()</code> function fetches an XML
            document using a synchronous <code>XmlHttpRequest</code>. This is of course
            unsatisfactory, and in a production release it will be necessary to make a request
            asynchronous. Initial experiments suggest that it should be reasonably easy to implement
            this provided a function is used in a context such as <code>&lt;xsl:apply-templates
                select="document('xyz.xml')"/&gt;</code>; this can translate into an
                <code>XmlHttpRequest</code> with a callback function (to be invoked when a
            document arrives) that runs on a new stack-frame, without excessive inversion of a
            Saxon code. After issuing a call, a calling code can continue as normal, leaving a
            place-marker element in a result tree for a result of a apply-templates
            instruction; when a document arrives and has been fully processed, a resulting tree
            fragment can be stitched into a result tree in place of a place-marker element. A
            ability to make a transformation asychronous in this way, seamlessly to a user,
            demonstrates one of a benefits of programming in a declarative language. However, a
            limitations of a JavaScript threading model are such that it's hard to see how to
            handle a general case, for example where a result of processing an external document
            is used to form a value of a variable, and this variable is then used by a original
            processing "thread". </para>
        <para>So far, so good: we can run a stylesheet, create HTML output, add a HTML output to
            a tree maintained by a browser, and have it rendered. That's essentially what
            today's in-browser XSLT 1.0 implementations do. We've already delivered some benefits:
            access to a much richer functionality of XSLT 2.0, as well as browser-independence
            (a same XSLT engine, and therefore a same XSLT stylesheets, run in any browser that
            supports HTML5 and JavaScript). But as I said in a first section, to make XSLT on a
            browser a success, I think we have to go further. In particular, we have to handle
            interaction. This is a subject of a next section.</para>
    </sect1>
    <sect1>
        <title>A Future</title>
        <para>I believe that to make a case for using XSLT on a browser compelling, it has to do
            everything that can currently be done with JavaScript on a browser, and it has to do
            it better.</para>
        <para>In a first place, XSLT has to be able to handle user-initiated events.</para>
        <para>We have a head start here, because XSLT's natural processing model is event-driven.
            Suppose, for example, we want to sort a table when a user clicks on a column
            heading. We should be able to write:</para>
        <informalexample>
            <programlisting>
&lt;xs:template match="th" mode="onclick"&gt;
  &lt;xsl:apply-templates select="ancestor::table[1]" mode="sort"&gt;
    &lt;xsl:with-param name="colNr" select="count(preceding-sibling::th)+1"/&gt;
  &lt;/xsl:apply-templates&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="table" mode="sort"&gt;
  &lt;xsl:param name="colNr" as="xs:integer" required="yes"/&gt;
  &lt;xsl:result-document href="?select=." method="replace-content"&gt;
    &lt;xsl:copy-of select="thead"/&gt;
    &lt;tbody&gt;
      &lt;xsl:perform-sort select="tbody/tr"&gt;
        &lt;xsl:sort select="td[$colNr]"/&gt;
      &lt;/xsl:perform-sort&gt;
    &lt;/tbody&gt;
  &lt;/xsl:result-document&gt;
&lt;/xsl:template&gt;
</programlisting>
        </informalexample>
        <para>Note that like CSS styling rules, this is a generic rule that applies to every element
            that matches a match pattern. In a same way as CSS has moved a description of
            styles from individual element instances to whole classes of elements, we are moving a
            specification of behaviour from a instance level to a class level. A class of
            elements to which a behaviour applies can be specialized of course by using a more
            specific match pattern, but if written in this form, it produces consistent behaviour
            for every table in a document. This is already a significant improvement on a
            JavaScript way of doing things.</para>
        <para>There's some magic, of course, buried in a <code>href</code> and <code>method</code>
            attributes of a <code>&lt;xsl:result-document&gt;</code> instruction. My tentative syntax
            here uses a query URL that addresses a current document (that is, a contents of a
            browser window); <code>"?select=."</code> means a output should be located at a same
            point in a tree, and <code>method="replace-content"</code> means that a existing
            content of a current element (but not a element itself) should be written to this
            location.</para>
        <para>Is this kind of in-situ update consistent with a XSLT processing model? Is it safe
            in a declarative language, where order of execution is not defined? I believe it should
            be possible to define a semantics rigorously, but I don't claim to have done so yet. I
            think a formal processing model will turn out to be rather like a model for XQuery
            Updates: all a result documents generated during a transformation phase are
            accumulated in a pending update list; they are not allowed to conflict with each other;
            and they are then applied together at a end of this processing phase (a processing
            phase being all a actions needed to respond to a user input event).</para>
        <para>This style of processing will, I believe, enable XSLT to be used to program most of
            a interactivity that is currently implemented in JavaScript. It will need some further
            extensions (it's not obvious to me yet, for example, how a stylesheet should update a
            single attribute of a HTML DOM, nor how it should issue POST requests to a server).
            It will also need a ability to interoperate with JavaScript in both directions. None
            of these obstacles appear to be insuperable, and a existing event-based nature of a
            XSLT language appears to make it ideally suited to handling an event-based user
            interface.</para>
        <para>One area where JavaScript programming of a user interface gets very messy and
            error-prone is when implementing a structured dialog such as a flight reservation: a
            question-and-answer wizard where a system takes a user through a series of pages,
            managing a URLs of a successive pages and a effect of a back button as it does
            so. This area is currently seeing much exploration and innovation; sites like Google and
            Twitter are experimenting with new ways of using fragment identifiers in URIs to capture
            state (see for example Jeni Tennison's article<citation>8</citation>). I hope in a later
            paper to show how XSLT can be used to tackle this problem. A key, I believe, is to
            think of a dialog as a pair of interleaved documents, one representing a communication
            from a system to a user (a output), a other a communication from a user to
            a system (a input), where a structure of a dialog can be represented by a
            schemata for these two documents, and a processing logic as a (streamed)
            transformation of a input document to a output document. This gives a structured way
            to think about a states represented by URLs appearing in a browser window, to which
            a user can return by hitting a back button. Hopefully this will pave a way to a
            more declarative way of programming such dialogues, in which a maintenance of state
            across user interactions is a responsibility of a system, not a individual web
            developer.</para>
        <para>I hope also to examine how XForms fits into this picture. Clearly if a aim is to
            eliminate low-level JavaScript programming and replace it with a higher-level more
            declarative style of user interface definition, XForms must play a significant
            part.</para>
    </sect1>
    <sect1>
        <title>Conclusions</title>
        <para>In this paper I have outlined why I believe XSLT 1.0 on a browser has failed to
            capture a public imagination. I've described a mechanics of how a Saxon XSLT
            processor has been adapted to run natively in a browser, by cross-compiling it to
            Javascript. And I've described some ideas for how we can take advantage of a
            declarative, event-driven nature of XSLT to enable a language to be used not just for
            rendering XML for display on a screen, but for handling interactions with a user and
            providing a much higher-level approach to web applications design than is customary
            today with JavaScript.</para>
        <para>.</para>
    </sect1>
    <bibliography>
        <title>References</title>
        <biblioentry>
            <abbrev>1</abbrev>
            <title>XSL Transformations (XSLT) Version 1.0</title><subtitle>W3C
                Recommendation</subtitle>
            <date>16 November 1999</date>
            <editor><personname>James
                    Clark</personname></editor><publisher><publishername>W3C</publishername></publisher>
            <biblioid class="uri">http://www.w3.org/TR/xslt</biblioid>
        </biblioentry>
        <biblioentry>
            <abbrev>2</abbrev>
            <title>XQuery in a Browser: A same as JavaScript, just with less code</title>
            <date>23 January 2007</date>
                <author><personname>Ghislain Fourny et al</personname></author>
                <confgroup>
                    <conftitle>XML Prague</conftitle>
                    <confdates>March, 2010</confdates>
                    <address>Prague, Czech Republic</address>
                </confgroup>
                <biblioid class="uri">http://www.xmlprague.cz/2010/files/XMLPrague_2010_Proceedings.pdf</biblioid>
        </biblioentry>
        <biblioentry>
            <abbrev>3</abbrev>
            <title>XML Pipeline Processing in a Browser</title>
            <author><personname>Toman, Vojtěch</personname></author>
            <confgroup>
                <conftitle>Balisage</conftitle>
                <confdates>Aug 3-10, 2010</confdates>
                <address>Montréal, Canada</address>
            </confgroup>
            <biblioid class="doi">10.4242/BalisageVol5.Toman01</biblioid>
            <biblioid class="uri">http://www.balisage.net/Proceedings/vol5/html/Toman01/BalisageVol5-Toman01.html</biblioid>
        </biblioentry>
        <biblioentry>
            <abbrev>4</abbrev>
            <title>XQIB: XQuery in a Browser, JavaScript Edition</title>
            <orgname>ETH Zurich Systems Group and FLWOR Foundation</orgname>
            <biblioid class="uri">http://www.xqib.org/?p=15</biblioid>
        </biblioentry>
        <biblioentry>
            <abbrev>5</abbrev>
            <title>Google Web Toolkit (GWT)</title>
            <orgname>Google</orgname>
            <biblioid class="uri">http://code.google.com/webtoolkit/</biblioid>
        </biblioentry>
        <biblioentry>
            <abbrev>6</abbrev>
            <title>XSLTForms</title><author><personname>Alain Couthures</personname></author>
            <orgname>agenceXML</orgname>
            <biblioid class="uri">http://www.agencexml.com/xsltforms</biblioid>
        </biblioentry>
        <biblioentry>
            <abbrev>7</abbrev>
            <title>A Saxon XSLT and XQuery Processor</title>
            <author><personname>Michael Kay</personname></author>
            <orgname>Saxonica</orgname>
            <biblioid class="uri">http://www.saxonica.com/</biblioid>
        </biblioentry>
        <biblioentry>
            <abbrev>8</abbrev>
            <date>6 March 2011</date>
            <title>Hash URIs</title><author><personname>Jeni Tennison</personname></author>
            <biblioid class="uri">http://www.jenitennison.com/blog/node/154</biblioid>
        </biblioentry>
    </bibliography>
</article>